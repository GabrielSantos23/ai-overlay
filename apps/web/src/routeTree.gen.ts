/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AppWindowRouteRouteImport } from './routes/appWindow/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AiIndexRouteImport } from './routes/ai/index'
import { Route as AiIdRouteImport } from './routes/ai/$id'
import { Route as AppWindowPageIndexRouteImport } from './routes/appWindow/page/index'
import { Route as AppWindowPageActivityIdRouteImport } from './routes/appWindow/page/$activityId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AppWindowRouteRoute = AppWindowRouteRouteImport.update({
  id: '/appWindow',
  path: '/appWindow',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AiIndexRoute = AiIndexRouteImport.update({
  id: '/ai/',
  path: '/ai/',
  getParentRoute: () => rootRouteImport,
} as any)
const AiIdRoute = AiIdRouteImport.update({
  id: '/ai/$id',
  path: '/ai/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AppWindowPageIndexRoute = AppWindowPageIndexRouteImport.update({
  id: '/page/',
  path: '/page/',
  getParentRoute: () => AppWindowRouteRoute,
} as any)
const AppWindowPageActivityIdRoute = AppWindowPageActivityIdRouteImport.update({
  id: '/page/$activityId',
  path: '/page/$activityId',
  getParentRoute: () => AppWindowRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/appWindow': typeof AppWindowRouteRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/ai/$id': typeof AiIdRoute
  '/ai': typeof AiIndexRoute
  '/appWindow/page/$activityId': typeof AppWindowPageActivityIdRoute
  '/appWindow/page': typeof AppWindowPageIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/appWindow': typeof AppWindowRouteRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/ai/$id': typeof AiIdRoute
  '/ai': typeof AiIndexRoute
  '/appWindow/page/$activityId': typeof AppWindowPageActivityIdRoute
  '/appWindow/page': typeof AppWindowPageIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/appWindow': typeof AppWindowRouteRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/ai/$id': typeof AiIdRoute
  '/ai/': typeof AiIndexRoute
  '/appWindow/page/$activityId': typeof AppWindowPageActivityIdRoute
  '/appWindow/page/': typeof AppWindowPageIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/appWindow'
    | '/dashboard'
    | '/login'
    | '/ai/$id'
    | '/ai'
    | '/appWindow/page/$activityId'
    | '/appWindow/page'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/appWindow'
    | '/dashboard'
    | '/login'
    | '/ai/$id'
    | '/ai'
    | '/appWindow/page/$activityId'
    | '/appWindow/page'
  id:
    | '__root__'
    | '/'
    | '/appWindow'
    | '/dashboard'
    | '/login'
    | '/ai/$id'
    | '/ai/'
    | '/appWindow/page/$activityId'
    | '/appWindow/page/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppWindowRouteRoute: typeof AppWindowRouteRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  AiIdRoute: typeof AiIdRoute
  AiIndexRoute: typeof AiIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/appWindow': {
      id: '/appWindow'
      path: '/appWindow'
      fullPath: '/appWindow'
      preLoaderRoute: typeof AppWindowRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai/': {
      id: '/ai/'
      path: '/ai'
      fullPath: '/ai'
      preLoaderRoute: typeof AiIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ai/$id': {
      id: '/ai/$id'
      path: '/ai/$id'
      fullPath: '/ai/$id'
      preLoaderRoute: typeof AiIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/appWindow/page/': {
      id: '/appWindow/page/'
      path: '/page'
      fullPath: '/appWindow/page'
      preLoaderRoute: typeof AppWindowPageIndexRouteImport
      parentRoute: typeof AppWindowRouteRoute
    }
    '/appWindow/page/$activityId': {
      id: '/appWindow/page/$activityId'
      path: '/page/$activityId'
      fullPath: '/appWindow/page/$activityId'
      preLoaderRoute: typeof AppWindowPageActivityIdRouteImport
      parentRoute: typeof AppWindowRouteRoute
    }
  }
}

interface AppWindowRouteRouteChildren {
  AppWindowPageActivityIdRoute: typeof AppWindowPageActivityIdRoute
  AppWindowPageIndexRoute: typeof AppWindowPageIndexRoute
}

const AppWindowRouteRouteChildren: AppWindowRouteRouteChildren = {
  AppWindowPageActivityIdRoute: AppWindowPageActivityIdRoute,
  AppWindowPageIndexRoute: AppWindowPageIndexRoute,
}

const AppWindowRouteRouteWithChildren = AppWindowRouteRoute._addFileChildren(
  AppWindowRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppWindowRouteRoute: AppWindowRouteRouteWithChildren,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  AiIdRoute: AiIdRoute,
  AiIndexRoute: AiIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
